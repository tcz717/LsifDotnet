using System.Threading.Tasks;
using LsifDotnet.Lsif;
using LsifDotnet.Roslyn;
using Microsoft.CodeAnalysis;
using Microsoft.Extensions.DependencyInjection;
using Xunit;


namespace LsifDotnet.Tests
{
    using Microsoft.CodeAnalysis.Text;


    public class KeywordTest
    {
        /// <summary>
        ///     The adhoc workspace.
        /// </summary>
        private readonly AdhocWorkspace _adhocWorkspace;

        private readonly Project _project;

        private readonly ServiceProvider _serviceProvider;

        public KeywordTest()
        {
            this._adhocWorkspace = new AdhocWorkspace();
            this._project = this._adhocWorkspace.AddProject(nameof(KeywordTest), "C#");
            this._serviceProvider = new ServiceCollection()
                .AddLogging()
                .AddTransient<IdentifierCollectorFactory>()
                .AddTransient<LsifIndexer>()
                .AddSingleton(this._adhocWorkspace as Workspace)
                .BuildServiceProvider();
        }

        [Fact]
        public async Task GlobalKeywordTest()
        {
            var code = SourceText.From(
@"// <autogenerated />
using System;
using System.Reflection;
using global::System.IO; // Adding extra global symbol
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute("".NETCoreApp,Version=v6.0"", FrameworkDisplayName = """")]");

            this._adhocWorkspace.AddDocument(this._project.Id, $"{nameof(this.GlobalKeywordTest)}.cs", code);

            var indexer = this._serviceProvider.GetRequiredService<LsifIndexer>();

            await foreach (var item in indexer.EmitLsif())
            {
                Assert.NotNull(item);
            }
        }
    }
}