using System;
using System.Linq;
using System.Threading.Tasks;
using LsifDotnet.Lsif;
using LsifDotnet.Roslyn;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Microsoft.Extensions.DependencyInjection;
using Xunit;

namespace LsifDotnet.Tests
{
    public class KeywordTest
    {
        /// <summary>
        ///     The adhoc workspace.
        /// </summary>
        private readonly AdhocWorkspace _adhocWorkspace;

        private readonly Project _project;

        private readonly ServiceProvider _serviceProvider;

        public KeywordTest()
        {
            _adhocWorkspace = new AdhocWorkspace();
            _project = AddProject(nameof(KeywordTest));
            _serviceProvider = new ServiceCollection()
                .AddLogging()
                .AddTransient<IdentifierCollectorFactory>()
                .AddTransient<LsifIndexer>()
                .AddSingleton(_adhocWorkspace as Workspace)
                .BuildServiceProvider();
        }

        private Project AddProject(string projectName)
        {
            return _adhocWorkspace.AddProject(ProjectInfo.Create(ProjectId.CreateNewId(),
                VersionStamp.Create(),
                projectName, projectName, "C#", metadataReferences: new[]
                {
                    MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
                }));
        }

        [Fact]
        public async Task GlobalKeywordTest()
        {
            var code1 = SourceText.From(
                @"// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute("".NETCoreApp,Version=v6.0"", FrameworkDisplayName = """")]");

            var code2 = SourceText.From(@"class Test : global::System.object {} // Adding extra global symbol");

            _adhocWorkspace.AddDocument(_project.Id, $"{nameof(GlobalKeywordTest)}.1.cs", code1);
            _adhocWorkspace.AddDocument(AddProject("SecondProject").Id, $"{nameof(GlobalKeywordTest)}.2.cs", code2);

            var indexer = _serviceProvider.GetRequiredService<LsifIndexer>();

            await foreach (var item in indexer.EmitLsif())
            {
                Assert.NotNull(item);
            }
        }

        /// <summary>
        /// See https://github.com/dotnet/roslyn/issues/58999
        /// </summary>
        /// <returns></returns>
        [Fact]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("MicrosoftCodeAnalysisCorrectness", "RS1024")]
        public async Task RoslynAliasEqualBugTest()
        {
            {
                var code1 = SourceText.From(
                    @"// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute("".NETCoreApp,Version=v6.0"", FrameworkDisplayName = """")]");

                var code2 = SourceText.From(@"using global::System.IO; // Adding extra global symbol");

                var doc1 = _adhocWorkspace.AddDocument(_project.Id, $"{nameof(GlobalKeywordTest)}.1.cs",
                    code1);
                var doc2 = _adhocWorkspace.AddDocument(_project.Id, $"{nameof(GlobalKeywordTest)}.2.cs",
                    code2);

                var globalSymbol1 = (await doc1.GetSemanticModelAsync())!
                    .GetAliasInfo((await doc1.GetSyntaxRootAsync())!
                        .DescendantNodes()
                        .OfType<IdentifierNameSyntax>()
                        .First(ident => ident.Identifier.Text == "global"));
                var globalSymbol2 = (await doc2.GetSemanticModelAsync())!
                    .GetAliasInfo((await doc2.GetSyntaxRootAsync())!
                        .DescendantNodes()
                        .OfType<IdentifierNameSyntax>()
                        .First(ident => ident.Identifier.Text == "global"));

                Assert.NotNull(globalSymbol1);
                Assert.NotNull(globalSymbol2);

                Assert.Throws<NullReferenceException>(() => globalSymbol1!.Equals(globalSymbol2));
            }
        }
    }
}